"""
Django settings for cocoonbackend project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

#imports para despliegue
import os
import dj_database_url

from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', default='django-insecure-$(eod^0d@cbmi-nugjs&pf%irg55(&pc=%z_cc@m#04kwra@i$')
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = 'DEPLOY' not in os.environ # en desarrollo es true, en produccion es false/ Cambio para despliegue en contendedor
# DEBUG = 'RENDER' not in os.environ # en desarrollo es true, en produccion es false
ALLOWED_HOSTS = []

# RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
# if RENDER_EXTERNAL_HOSTNAME:
#     ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)  # si la variable contiene algo, lo agrega. Si render me da la url la agrego
# else:


ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '*').split(',') # despliegue en contendedor
ALLOWED_HOSTS = ['*']  # Cambia esto para producción

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders', # para permitir peticiones desde el frontend
    'rest_framework',
    'rest_framework.authtoken', # para autenticar con token
    'usuarios',
    'propiedades',
    'reservas',
    'storages',
    'resenas',
    'django_filters',
    #configuracion para documentacion de api
    'drf_spectacular', 
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', # para permitir peticiones desde el frontend
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'cocoonbackend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'cocoonbackend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     'default': dj_database_url.config(
#         # Replace this value with your local database's connection string.
#         default='sqlite:///db.sqlite3',
#         conn_max_age=600
#     )
# }

# configuración de base de datos para despliegue en contenedor / postgres
DATABASES = {
    'default': dj_database_url.config(
        default=os.environ.get('DATABASE_URL', 'sqlite:///db.sqlite3'),
        conn_max_age=600
    )
}
# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# STATIC_URL = 'static/'

# This production code might break development mode, so we check whether we're in DEBUG mode
# if not DEBUG:
#     # Tell Django to copy static assets into a path called `staticfiles` (this is specific to Render)
#     STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
#     # Enable the WhiteNoise storage backend, which compresses static files to reduce disk use
#     # and renames the files with unique names for each version to support long-term caching
#     STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Configuración de archivos estáticos
STATIC_URL = '/static/'  # Prefijo de URL para archivos estáticos
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Directorio donde se recopilan archivos estáticos




# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# FRONTEND_URL = config('FRONTEND_URL')
# print(f"FRONTEND_URL loaded: {FRONTEND_URL}")

# Configuración de CORS
CORS_ALLOWED_ORIGINS = [
    config('FRONTEND_URL', default='http://localhost:5173').rstrip('/'),
]


#CORS_ALLOW_CREDENTIALS = True

# Configuracion de email backend para recuperacion de contrasena, esto debe especificarse en un .env o mandar como variables de entorno
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = config('MAIL_COCOON_PROJECT')
EMAIL_HOST_PASSWORD = config('MAIL_PASS_COCOON_PROJECT')
DEFAULT_FROM_EMAIL = config('MAIL_COCOON_PROJECT')


# Configuración de almacenamiento de imagenes
DEFAULT_FILE_STORAGE = "django.core.files.storage.FileSystemStorage"
# Configuración de archivos de medios
MEDIA_URL = 'http://localhost/media/'  # Prefijo de URL para archivos de medio, agrego el prefijo de nginx
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # Directorio físico para archivos cargados por usuarios



# configuracion para usar drf-spectacular
REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',  
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'API para la aplicación Cocoon-Home',
    'DESCRIPTION': 'Documentación de la API para la gestión de propiedades, reservas y usuarios.',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': True,  
}